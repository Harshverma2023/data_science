# -*- coding: utf-8 -*-
"""decsion tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w1qzUBMBGaA4Ky6t1TQAm4i87jdzG7U3
"""

import numpy as np
import pandas as pd

path="/content/diabetes12.csv"
data=pd.read_csv(path)
data.head()

x = data[["Pregnancies", "Glucose", "BloodPressure", "BloodPressure", "Insulin", "BMI", "DiabetesPedigreeFunction", "Age"]]  # Remove leading tabs from column names
y = data[["Outcome"]]  # Remove leading tabs from column name
print(x, y)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
print(x_train, x_test, y_train, y_test)

from sklearn .tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(x_train, y_train)

y_pred = model.predict(x_test) # Changed 'tree' to 'model'
print(y_pred)

from sklearn.metrics import confusion_matrix # Changed module name from 'sklearn.metric' to 'sklearn.metrics'
cm = confusion_matrix(y_test, y_pred)
print(cm)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
class_names=[0,1]
fig, ax = plt.subplots()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)
sns.heatmap(pd.DataFrame(cm), annot=True, cmap="YlGnBu", fmt='g')
ax.xaxis.set_label_position("top")
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
plt.show()

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))

from sklearn.tree import plot_tree
from sklearn.model_selection import GridSearchCV # Import GridSearchCV from sklearn.model_selection
plt.figure(figsize=(15, 10))
plot_tree(model, filled=True, feature_names=x.columns, class_names=['0', '1'])
plt.show()
param_grid={
    'max_depth': [2,3,4,5],
'criterion': ['gini', 'entropy']
}
grid_search=GridSearchCV(estimator=model, param_grid=param_grid, cv=5)
grid_search.fit(x_train, y_train)
print(grid_search.best_params_)